Generate Objects › ewert_reproduction.re › output
[@ocaml.ppx.context
  {
    tool_name: \"migrate_driver\",
    include_dirs: [],
    load_path: [],
    open_modules: [],
    for_package: None,
    debug: false,
    use_threads: false,
    use_vmthreads: false,
    recursive_types: false,
    principal: false,
    transparent_modules: false,
    unboxed_types: false,
    unsafe_string: false,
    cookies: [],
  }
];
module UserData: {
  [@ocaml.warning \"-32\"];
  module Raw: {
    type t_user = {
      .
      \"id\": string,
      \"firstname\": Js.Nullable.t(string),
      \"lastname\": string,
    };
    type t = {. \"user\": t_user};
    type nonrec t_Workspace = t;
  };
  type t_user = {
    .
    \"id\": string,
    \"firstname\": option(string),
    \"lastname\": string,
  };
  type t = {. \"user\": t_user};
  type nonrec t_Workspace = t;
  /** the GraphQL fragment */
  let query: string;
  /** Parse the raw JSON-compatible GraphQL data into ReasonML data types */
  let parse: Raw.t => t;
  /** Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON-compatible data */
  let serialize: t => Raw.t;
  let verifyArgsAndParse:
    (~userId: [ | `NonNull_String], ~fragmentName: [ | `UserData], Raw.t) => t;
  let verifyName: [ | `UserData] => unit;
  external unsafe_fromJson: Js.Json.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Js.Json.t = \"%identity\";
} = {
  [@ocaml.warning \"-32\"];
  module Raw = {
    type t_user = {
      .
      \"id\": string,
      \"firstname\": Js.Nullable.t(string),
      \"lastname\": string,
    };
    type t = {. \"user\": t_user};
    type nonrec t_Workspace = t;
  };
  type t_user = {
    .
    \"id\": string,
    \"firstname\": option(string),
    \"lastname\": string,
  };
  type t = {. \"user\": t_user};
  type nonrec t_Workspace = t;
  let query = \"fragment UserData on Workspace   {\\nuser(id: $userId)  {\\nid  \\nfirstname  \\nlastname  \\n}\\n\\n}\\n\";
  let parse: Raw.t => t =
    value => {
      let user = {
        let value = value##user;
        let lastname = {
          let value = value##lastname;
          value;
        }
        and firstname = {
          let value = value##firstname;
          switch (Js.toOption(value)) {
          | Some(value) => Some(value)
          | None => None
          };
        }
        and id = {
          let value = value##id;
          value;
        };
        {\"id\": id, \"firstname\": firstname, \"lastname\": lastname};
      };
      {\"user\": user};
    };
  let serialize: t => Raw.t =
    value => {
      let user = {
        let value = value##user;
        let lastname = {
          let value = value##lastname;
          value;
        }
        and firstname = {
          let value = value##firstname;
          switch (value) {
          | Some(value) => Js.Nullable.return(value)
          | None => Js.Nullable.null
          };
        }
        and id = {
          let value = value##id;
          value;
        };
        {\"id\": id, \"firstname\": firstname, \"lastname\": lastname};
      };
      {\"user\": user};
    };
  let verifyArgsAndParse =
      (
        ~userId as _userId: [ | `NonNull_String],
        ~fragmentName as _UserData: [ | `UserData],
        value: Raw.t,
      ) =>
    parse(value);
  let verifyName =
    fun
    | `UserData => ();
  external unsafe_fromJson: Js.Json.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Js.Json.t = \"%identity\";
};

