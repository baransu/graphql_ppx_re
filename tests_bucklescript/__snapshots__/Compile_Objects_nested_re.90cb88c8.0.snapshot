Compile Objects › nested.re › output
// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Caml_option = require(\"bs-platform/lib/js/caml_option.js\");

var Raw = {};

function parse(value) {
  var value$1 = value.let_;
  var value$2 = value$1.inner;
  var inner;
  if (value$2 == null) {
    inner = undefined;
  } else {
    var value$3 = value$2.inner;
    inner = {
      inner: !(value$3 == null) ? ({
            field: value$3.field
          }) : undefined
    };
  }
  var let_ = {
    inner: inner
  };
  var value$4 = value.second;
  var value$5 = value$4.inner;
  var inner$1;
  if (value$5 == null) {
    inner$1 = undefined;
  } else {
    var value$6 = value$5.inner;
    var tmp;
    if (value$6 == null) {
      tmp = undefined;
    } else {
      var value$7 = value$6.f2;
      var value$8 = value$6.f1;
      tmp = {
        f1: value$8,
        f2: value$7
      };
    }
    inner$1 = {
      inner: tmp
    };
  }
  var second = {
    inner: inner$1
  };
  var value$9 = value.first;
  var value$10 = value$9.inner;
  var inner$2;
  if (value$10 == null) {
    inner$2 = undefined;
  } else {
    var value$11 = value$10.inner;
    inner$2 = {
      inner: !(value$11 == null) ? ({
            field: value$11.field
          }) : undefined
    };
  }
  var first = {
    inner: inner$2
  };
  return {
          first: first,
          second: second,
          let_: let_
        };
}

function serialize(value) {
  var value$1 = value.let_;
  var value$2 = value$1.inner;
  var inner;
  if (value$2 !== undefined) {
    var value$3 = Caml_option.valFromOption(value$2).inner;
    inner = {
      inner: value$3 !== undefined ? ({
            field: Caml_option.valFromOption(value$3).field
          }) : null
    };
  } else {
    inner = null;
  }
  var let_ = {
    inner: inner
  };
  var value$4 = value.second;
  var value$5 = value$4.inner;
  var inner$1;
  if (value$5 !== undefined) {
    var value$6 = Caml_option.valFromOption(value$5).inner;
    var tmp;
    if (value$6 !== undefined) {
      var value$7 = value$6.f2;
      var value$8 = value$6.f1;
      tmp = {
        f1: value$8,
        f2: value$7
      };
    } else {
      tmp = null;
    }
    inner$1 = {
      inner: tmp
    };
  } else {
    inner$1 = null;
  }
  var second = {
    inner: inner$1
  };
  var value$9 = value.first;
  var value$10 = value$9.inner;
  var inner$2;
  if (value$10 !== undefined) {
    var value$11 = Caml_option.valFromOption(value$10).inner;
    inner$2 = {
      inner: value$11 !== undefined ? ({
            field: Caml_option.valFromOption(value$11).field
          }) : null
    };
  } else {
    inner$2 = null;
  }
  var first = {
    inner: inner$2
  };
  return {
          first: first,
          second: second,
          let_: let_
        };
}

function serializeVariables(param) {
  
}

function makeVariables(param) {
  
}

function makeDefaultVariables(param) {
  
}

var MyQuery = {
  Raw: Raw,
  query: \"query   {\\nfirst: nestedObject  {\\ninner  {\\ninner  {\\nfield  \\n}\\n\\n}\\n\\n}\\n\\nsecond: nestedObject  {\\ninner  {\\ninner  {\\nf1: field  \\nf2: field  \\n}\\n\\n}\\n\\n}\\n\\nlet: nestedObject  {\\ninner  {\\ninner  {\\nfield  \\n}\\n\\n}\\n\\n}\\n\\n}\\n\",
  parse: parse,
  serialize: serialize,
  serializeVariables: serializeVariables,
  makeVariables: makeVariables,
  makeDefaultVariables: makeDefaultVariables
};

var Raw$1 = {};

function parse$1(value) {
  var value$1 = value.nestedObject;
  var value$2 = value$1.inner;
  var inner;
  if (value$2 == null) {
    inner = undefined;
  } else {
    var value$3 = value$2.inner;
    inner = {
      inner: !(value$3 == null) ? ({
            field: value$3.field
          }) : undefined
    };
  }
  return {
          nestedObject: {
            inner: inner
          }
        };
}

function serialize$1(value) {
  var value$1 = value.nestedObject;
  var value$2 = value$1.inner;
  var inner;
  if (value$2 !== undefined) {
    var value$3 = Caml_option.valFromOption(value$2).inner;
    inner = {
      inner: value$3 !== undefined ? ({
            field: Caml_option.valFromOption(value$3).field
          }) : null
    };
  } else {
    inner = null;
  }
  return {
          nestedObject: {
            inner: inner
          }
        };
}

function serializeVariables$1(param) {
  
}

function makeVariables$1(param) {
  
}

function makeDefaultVariables$1(param) {
  
}

var MyQueryWithSig = {
  Raw: Raw$1,
  query: \"query   {\\nnestedObject  {\\ninner  {\\ninner  {\\nfield  \\n}\\n\\n}\\n\\n}\\n\\n}\\n\",
  parse: parse$1,
  serialize: serialize$1,
  serializeVariables: serializeVariables$1,
  makeVariables: makeVariables$1,
  makeDefaultVariables: makeDefaultVariables$1
};

var Test = {
  MyQueryWithSig: MyQueryWithSig
};

var Raw$2 = {};

function parse$2(value) {
  var value$1 = value.nestedObject;
  var value$2 = value$1.inner;
  var inner;
  if (value$2 == null) {
    inner = undefined;
  } else {
    var value$3 = value$2.inner;
    inner = {
      inner: !(value$3 == null) ? ({
            field: value$3.field
          }) : undefined
    };
  }
  return {
          nestedObject: {
            inner: inner
          }
        };
}

function serialize$2(value) {
  var value$1 = value.nestedObject;
  var value$2 = value$1.inner;
  var inner;
  if (value$2 !== undefined) {
    var value$3 = Caml_option.valFromOption(value$2).inner;
    inner = {
      inner: value$3 !== undefined ? ({
            field: Caml_option.valFromOption(value$3).field
          }) : null
    };
  } else {
    inner = null;
  }
  return {
          nestedObject: {
            inner: inner
          }
        };
}

function serializeVariables$2(param) {
  
}

function makeVariables$2(param) {
  
}

function makeDefaultVariables$2(param) {
  
}

var MyQueryWithSigDirect = {
  Raw: Raw$2,
  query: \"query   {\\nnestedObject  {\\ninner  {\\ninner  {\\nfield  \\n}\\n\\n}\\n\\n}\\n\\n}\\n\",
  parse: parse$2,
  serialize: serialize$2,
  serializeVariables: serializeVariables$2,
  makeVariables: makeVariables$2,
  makeDefaultVariables: makeDefaultVariables$2
};

exports.MyQuery = MyQuery;
exports.Test = Test;
exports.MyQueryWithSigDirect = MyQueryWithSigDirect;
/* No side effect */

