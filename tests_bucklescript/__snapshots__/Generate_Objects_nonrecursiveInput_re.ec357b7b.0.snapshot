Generate Objects › nonrecursiveInput.re › output
[@ocaml.ppx.context
  {
    tool_name: \"migrate_driver\",
    include_dirs: [],
    load_path: [],
    open_modules: [],
    for_package: None,
    debug: false,
    use_threads: false,
    use_vmthreads: false,
    recursive_types: false,
    principal: false,
    transparent_modules: false,
    unboxed_types: false,
    unsafe_string: false,
    cookies: [],
  }
];
module MyQuery: {
  module Raw: {
    type t = {. \"nonrecursiveInput\": string};
    type t_variables = {. \"arg\": t_variables_NonrecursiveInput}
    and t_variables_NonrecursiveInput = {
      .
      \"nonNullableField\": string,
      \"nullableArray\": Js.Nullable.t(array(Js.Nullable.t(string))),
      \"field\": Js.Nullable.t(string),
      \"enum\": Js.Nullable.t(string),
      \"embeddedInput\":
        Js.Nullable.t(array(Js.Nullable.t(t_variables_EmbeddedInput))),
      \"custom\": Js.Nullable.t(Js.Json.t),
    }
    and t_variables_EmbeddedInput = {. \"field\": Js.Nullable.t(string)};
  };
  type t = {. \"nonrecursiveInput\": string};
  type t_variables = {. \"arg\": t_variables_NonrecursiveInput}
  and t_variables_NonrecursiveInput = {
    .
    \"nonNullableField\": string,
    \"nullableArray\": option(array(option(string))),
    \"field\": option(string),
    \"enum\": option([ | `FIRST | `SECOND | `THIRD]),
    \"embeddedInput\": option(array(option(t_variables_EmbeddedInput))),
    \"custom\": option(Js.Json.t),
  }
  and t_variables_EmbeddedInput = {. \"field\": option(string)};
  /** The GraphQL query */
  let query: string;
  /** Parse the JSON-compatible GraphQL data to ReasonML data types */
  let parse: Raw.t => t;
  /** Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data */
  let serialize: t => Raw.t;
  let serializeVariables: t_variables => Raw.t_variables;
  let serializeInputObjectNonrecursiveInput:
    t_variables_NonrecursiveInput => Raw.t_variables_NonrecursiveInput;
  let serializeInputObjectEmbeddedInput:
    t_variables_EmbeddedInput => Raw.t_variables_EmbeddedInput;
  let makeVariables:
    (~arg: t_variables_NonrecursiveInput, unit) => t_variables;
  let makeInputObjectNonrecursiveInput:
    (
      ~nonNullableField: string,
      ~nullableArray: array(option(string))=?,
      ~field: string=?,
      ~enum: [ | `FIRST | `SECOND | `THIRD]=?,
      ~embeddedInput: array(option(t_variables_EmbeddedInput))=?,
      ~custom: Js.Json.t=?,
      unit
    ) =>
    t_variables_NonrecursiveInput;
  let makeInputObjectEmbeddedInput:
    (~field: string=?, unit) => t_variables_EmbeddedInput;
  external unsafe_fromJson: Js.Json.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Js.Json.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Js.Json.t = \"%identity\";
} = {
  [@ocaml.warning \"-32\"];
  module Raw = {
    type t = {. \"nonrecursiveInput\": string};
    type t_variables = {. \"arg\": t_variables_NonrecursiveInput}
    and t_variables_NonrecursiveInput = {
      .
      \"nonNullableField\": string,
      \"nullableArray\": Js.Nullable.t(array(Js.Nullable.t(string))),
      \"field\": Js.Nullable.t(string),
      \"enum\": Js.Nullable.t(string),
      \"embeddedInput\":
        Js.Nullable.t(array(Js.Nullable.t(t_variables_EmbeddedInput))),
      \"custom\": Js.Nullable.t(Js.Json.t),
    }
    and t_variables_EmbeddedInput = {. \"field\": Js.Nullable.t(string)};
  };
  type t = {. \"nonrecursiveInput\": string};
  type t_variables = {. \"arg\": t_variables_NonrecursiveInput}
  and t_variables_NonrecursiveInput = {
    .
    \"nonNullableField\": string,
    \"nullableArray\": option(array(option(string))),
    \"field\": option(string),
    \"enum\": option([ | `FIRST | `SECOND | `THIRD]),
    \"embeddedInput\": option(array(option(t_variables_EmbeddedInput))),
    \"custom\": option(Js.Json.t),
  }
  and t_variables_EmbeddedInput = {. \"field\": option(string)};
  let query = \"query ($arg: NonrecursiveInput!)  {\\nnonrecursiveInput(arg: $arg)  \\n}\\n\";
  let parse: Raw.t => t =
    value => {
      let nonrecursiveInput = {
        let value = value##nonrecursiveInput;
        value;
      };
      {\"nonrecursiveInput\": nonrecursiveInput};
    };
  let serialize: t => Raw.t =
    value => {
      let nonrecursiveInput = {
        let value = value##nonrecursiveInput;
        value;
      };
      {\"nonrecursiveInput\": nonrecursiveInput};
    };
  let rec serializeVariables: t_variables => Raw.t_variables =
    inp => {
      \"arg\": (a => serializeInputObjectNonrecursiveInput(a))(inp##arg),
    }
  and serializeInputObjectNonrecursiveInput:
    t_variables_NonrecursiveInput => Raw.t_variables_NonrecursiveInput =
    inp => {
      \"nonNullableField\": (a => a)(inp##nonNullableField),
      \"nullableArray\":
        (
          a =>
            switch (a) {
            | None => Js.Nullable.undefined
            | Some(b) =>
              Js.Nullable.return(
                (
                  a =>
                    Array.map(
                      b =>
                        (
                          a =>
                            switch (a) {
                            | None => Js.Nullable.undefined
                            | Some(b) => Js.Nullable.return((a => a)(b))
                            }
                        )(
                          b,
                        ),
                      a,
                    )
                )(
                  b,
                ),
              )
            }
        )(
          inp##nullableArray,
        ),
      \"field\":
        (
          a =>
            switch (a) {
            | None => Js.Nullable.undefined
            | Some(b) => Js.Nullable.return((a => a)(b))
            }
        )(
          inp##field,
        ),
      \"enum\":
        (
          a =>
            switch (a) {
            | None => Js.Nullable.undefined
            | Some(b) =>
              Js.Nullable.return(
                (
                  a =>
                    switch (a) {
                    | `FIRST => \"FIRST\"
                    | `SECOND => \"SECOND\"
                    | `THIRD => \"THIRD\"
                    }
                )(
                  b,
                ),
              )
            }
        )(
          inp##enum,
        ),
      \"embeddedInput\":
        (
          a =>
            switch (a) {
            | None => Js.Nullable.undefined
            | Some(b) =>
              Js.Nullable.return(
                (
                  a =>
                    Array.map(
                      b =>
                        (
                          a =>
                            switch (a) {
                            | None => Js.Nullable.undefined
                            | Some(b) =>
                              Js.Nullable.return(
                                (a => serializeInputObjectEmbeddedInput(a))(
                                  b,
                                ),
                              )
                            }
                        )(
                          b,
                        ),
                      a,
                    )
                )(
                  b,
                ),
              )
            }
        )(
          inp##embeddedInput,
        ),
      \"custom\":
        (
          a =>
            switch (a) {
            | None => Js.Nullable.undefined
            | Some(b) => Js.Nullable.return((a => a)(b))
            }
        )(
          inp##custom,
        ),
    }
  and serializeInputObjectEmbeddedInput:
    t_variables_EmbeddedInput => Raw.t_variables_EmbeddedInput =
    inp => {
      \"field\":
        (
          a =>
            switch (a) {
            | None => Js.Nullable.undefined
            | Some(b) => Js.Nullable.return((a => a)(b))
            }
        )(
          inp##field,
        ),
    };
  let makeVariables = (~arg, ()): t_variables => {\"arg\": arg}
  and makeInputObjectNonrecursiveInput =
      (
        ~nonNullableField,
        ~nullableArray=?,
        ~field=?,
        ~enum=?,
        ~embeddedInput=?,
        ~custom=?,
        (),
      )
      : t_variables_NonrecursiveInput => {
    \"nonNullableField\": nonNullableField,
    \"nullableArray\": nullableArray,
    \"field\": field,
    \"enum\": enum,
    \"embeddedInput\": embeddedInput,
    \"custom\": custom,
  }
  and makeInputObjectEmbeddedInput = (~field=?, ()): t_variables_EmbeddedInput => {
    \"field\": field,
  };
  external unsafe_fromJson: Js.Json.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Js.Json.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Js.Json.t = \"%identity\";
};
module MyQuery2: {
  module Raw: {
    type t = {
      .
      \"scalarsInput\": string,
      \"more\": string,
    };
    type t_variables = {
      .
      \"arg\": t_variables_NonrecursiveInput,
      \"arg2\": t_variables_NonrecursiveInput,
    }
    and t_variables_NonrecursiveInput = {
      .
      \"nonNullableField\": string,
      \"nullableArray\": Js.Nullable.t(array(Js.Nullable.t(string))),
      \"field\": Js.Nullable.t(string),
      \"enum\": Js.Nullable.t(string),
      \"embeddedInput\":
        Js.Nullable.t(array(Js.Nullable.t(t_variables_EmbeddedInput))),
      \"custom\": Js.Nullable.t(Js.Json.t),
    }
    and t_variables_EmbeddedInput = {. \"field\": Js.Nullable.t(string)};
  };
  type t = {
    .
    \"scalarsInput\": string,
    \"more\": string,
  };
  type t_variables = {
    .
    \"arg\": t_variables_NonrecursiveInput,
    \"arg2\": t_variables_NonrecursiveInput,
  }
  and t_variables_NonrecursiveInput = {
    .
    \"nonNullableField\": string,
    \"nullableArray\": option(array(option(string))),
    \"field\": option(string),
    \"enum\": option([ | `FIRST | `SECOND | `THIRD]),
    \"embeddedInput\": option(array(option(t_variables_EmbeddedInput))),
    \"custom\": option(Js.Json.t),
  }
  and t_variables_EmbeddedInput = {. \"field\": option(string)};
  /** The GraphQL query */
  let query: string;
  /** Parse the JSON-compatible GraphQL data to ReasonML data types */
  let parse: Raw.t => t;
  /** Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data */
  let serialize: t => Raw.t;
  let serializeVariables: t_variables => Raw.t_variables;
  let serializeInputObjectNonrecursiveInput:
    t_variables_NonrecursiveInput => Raw.t_variables_NonrecursiveInput;
  let serializeInputObjectEmbeddedInput:
    t_variables_EmbeddedInput => Raw.t_variables_EmbeddedInput;
  let makeVariables:
    (
      ~arg: t_variables_NonrecursiveInput,
      ~arg2: t_variables_NonrecursiveInput,
      unit
    ) =>
    t_variables;
  let makeInputObjectNonrecursiveInput:
    (
      ~nonNullableField: string,
      ~nullableArray: array(option(string))=?,
      ~field: string=?,
      ~enum: [ | `FIRST | `SECOND | `THIRD]=?,
      ~embeddedInput: array(option(t_variables_EmbeddedInput))=?,
      ~custom: Js.Json.t=?,
      unit
    ) =>
    t_variables_NonrecursiveInput;
  let makeInputObjectEmbeddedInput:
    (~field: string=?, unit) => t_variables_EmbeddedInput;
  external unsafe_fromJson: Js.Json.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Js.Json.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Js.Json.t = \"%identity\";
} = {
  [@ocaml.warning \"-32\"];
  module Raw = {
    type t = {
      .
      \"scalarsInput\": string,
      \"more\": string,
    };
    type t_variables = {
      .
      \"arg\": t_variables_NonrecursiveInput,
      \"arg2\": t_variables_NonrecursiveInput,
    }
    and t_variables_NonrecursiveInput = {
      .
      \"nonNullableField\": string,
      \"nullableArray\": Js.Nullable.t(array(Js.Nullable.t(string))),
      \"field\": Js.Nullable.t(string),
      \"enum\": Js.Nullable.t(string),
      \"embeddedInput\":
        Js.Nullable.t(array(Js.Nullable.t(t_variables_EmbeddedInput))),
      \"custom\": Js.Nullable.t(Js.Json.t),
    }
    and t_variables_EmbeddedInput = {. \"field\": Js.Nullable.t(string)};
  };
  type t = {
    .
    \"scalarsInput\": string,
    \"more\": string,
  };
  type t_variables = {
    .
    \"arg\": t_variables_NonrecursiveInput,
    \"arg2\": t_variables_NonrecursiveInput,
  }
  and t_variables_NonrecursiveInput = {
    .
    \"nonNullableField\": string,
    \"nullableArray\": option(array(option(string))),
    \"field\": option(string),
    \"enum\": option([ | `FIRST | `SECOND | `THIRD]),
    \"embeddedInput\": option(array(option(t_variables_EmbeddedInput))),
    \"custom\": option(Js.Json.t),
  }
  and t_variables_EmbeddedInput = {. \"field\": option(string)};
  let query = \"query ($arg: NonrecursiveInput!, $arg2: NonrecursiveInput!)  {\\nscalarsInput(arg: $arg)  \\nmore: scalarsInput(arg: $arg2)  \\n}\\n\";
  let parse: Raw.t => t =
    value => {
      let more = {
        let value = value##more;
        value;
      }
      and scalarsInput = {
        let value = value##scalarsInput;
        value;
      };
      {\"scalarsInput\": scalarsInput, \"more\": more};
    };
  let serialize: t => Raw.t =
    value => {
      let more = {
        let value = value##more;
        value;
      }
      and scalarsInput = {
        let value = value##scalarsInput;
        value;
      };
      {\"scalarsInput\": scalarsInput, \"more\": more};
    };
  let rec serializeVariables: t_variables => Raw.t_variables =
    inp => {
      \"arg\": (a => serializeInputObjectNonrecursiveInput(a))(inp##arg),
      \"arg2\": (a => serializeInputObjectNonrecursiveInput(a))(inp##arg2),
    }
  and serializeInputObjectNonrecursiveInput:
    t_variables_NonrecursiveInput => Raw.t_variables_NonrecursiveInput =
    inp => {
      \"nonNullableField\": (a => a)(inp##nonNullableField),
      \"nullableArray\":
        (
          a =>
            switch (a) {
            | None => Js.Nullable.undefined
            | Some(b) =>
              Js.Nullable.return(
                (
                  a =>
                    Array.map(
                      b =>
                        (
                          a =>
                            switch (a) {
                            | None => Js.Nullable.undefined
                            | Some(b) => Js.Nullable.return((a => a)(b))
                            }
                        )(
                          b,
                        ),
                      a,
                    )
                )(
                  b,
                ),
              )
            }
        )(
          inp##nullableArray,
        ),
      \"field\":
        (
          a =>
            switch (a) {
            | None => Js.Nullable.undefined
            | Some(b) => Js.Nullable.return((a => a)(b))
            }
        )(
          inp##field,
        ),
      \"enum\":
        (
          a =>
            switch (a) {
            | None => Js.Nullable.undefined
            | Some(b) =>
              Js.Nullable.return(
                (
                  a =>
                    switch (a) {
                    | `FIRST => \"FIRST\"
                    | `SECOND => \"SECOND\"
                    | `THIRD => \"THIRD\"
                    }
                )(
                  b,
                ),
              )
            }
        )(
          inp##enum,
        ),
      \"embeddedInput\":
        (
          a =>
            switch (a) {
            | None => Js.Nullable.undefined
            | Some(b) =>
              Js.Nullable.return(
                (
                  a =>
                    Array.map(
                      b =>
                        (
                          a =>
                            switch (a) {
                            | None => Js.Nullable.undefined
                            | Some(b) =>
                              Js.Nullable.return(
                                (a => serializeInputObjectEmbeddedInput(a))(
                                  b,
                                ),
                              )
                            }
                        )(
                          b,
                        ),
                      a,
                    )
                )(
                  b,
                ),
              )
            }
        )(
          inp##embeddedInput,
        ),
      \"custom\":
        (
          a =>
            switch (a) {
            | None => Js.Nullable.undefined
            | Some(b) => Js.Nullable.return((a => a)(b))
            }
        )(
          inp##custom,
        ),
    }
  and serializeInputObjectEmbeddedInput:
    t_variables_EmbeddedInput => Raw.t_variables_EmbeddedInput =
    inp => {
      \"field\":
        (
          a =>
            switch (a) {
            | None => Js.Nullable.undefined
            | Some(b) => Js.Nullable.return((a => a)(b))
            }
        )(
          inp##field,
        ),
    };
  let makeVariables = (~arg, ~arg2, ()): t_variables => {
    \"arg\": arg,
    \"arg2\": arg2,
  }
  and makeInputObjectNonrecursiveInput =
      (
        ~nonNullableField,
        ~nullableArray=?,
        ~field=?,
        ~enum=?,
        ~embeddedInput=?,
        ~custom=?,
        (),
      )
      : t_variables_NonrecursiveInput => {
    \"nonNullableField\": nonNullableField,
    \"nullableArray\": nullableArray,
    \"field\": field,
    \"enum\": enum,
    \"embeddedInput\": embeddedInput,
    \"custom\": custom,
  }
  and makeInputObjectEmbeddedInput = (~field=?, ()): t_variables_EmbeddedInput => {
    \"field\": field,
  };
  external unsafe_fromJson: Js.Json.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Js.Json.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Js.Json.t = \"%identity\";
};

